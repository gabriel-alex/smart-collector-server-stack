[{"id":"fbbcc75a.5428b","type":"tab","label":"SmartCollector","disabled":false,"info":""},{"id":"9366e1ec.4d135","type":"influxdb","hostname":"127.0.0.1","port":"8086","protocol":"http","database":"database","name":"Test sans mdp","usetls":false,"tls":"6ba48b1.79f5e74","influxdbVersion":"1.8-flux","url":"http://influxdb:8086","rejectUnauthorized":false},{"id":"6ba48b1.79f5e74","type":"tls-config","name":"bb400","cert":"","key":"","ca":"","certname":"","keyname":"","caname":"","servername":"","verifyservercert":true},{"id":"245bc9f1.f46eb6","type":"http in","z":"fbbcc75a.5428b","name":"","url":"api/smartcollector/:id","method":"post","upload":false,"swaggerDoc":"","x":190,"y":160,"wires":[["af0894c.db19ce8","bd03fac6.8b74b8"]]},{"id":"93e189f3.5518e","type":"http response","z":"fbbcc75a.5428b","name":"Response","statusCode":"","headers":{},"x":820,"y":100,"wires":[]},{"id":"af0894c.db19ce8","type":"function","z":"fbbcc75a.5428b","name":"Check request body","func":"if(msg.payload != null && !(\"payload\" in msg.payload)){\n    node.error(\"The request body has to contains a 'payload' field \");\n    msg.payload = {error : \"Lenght of the payload not respected\"};\n    msg.statusCode = 500;\n    return msg;\n}else if(msg.payload.payload.length != 8){\n    node.error(\"The lenght does no correspond to the data expected\");\n    msg.payload = {error : \"Lenght of the payload not respected\"};\n    msg.statusCode = 500;\n    return msg;\n}else{\n    return msg\n}","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":560,"y":100,"wires":[["93e189f3.5518e","515cd534.b65dcc","f12e1e3.1d79be"]]},{"id":"bd03fac6.8b74b8","type":"debug","z":"fbbcc75a.5428b","name":"input data","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":500,"y":180,"wires":[]},{"id":"8fc721c7.b0caa","type":"influxdb out","z":"fbbcc75a.5428b","influxdb":"9366e1ec.4d135","name":"InfluxDB input - Batteries","measurement":"BatteriesState","precision":"","retentionPolicy":"","database":"smartcollector","precisionV18FluxV20":"ms","retentionPolicyV18Flux":"autogen","org":"erpi","bucket":"smartcollector","x":1190,"y":320,"wires":[]},{"id":"f12e1e3.1d79be","type":"function","z":"fbbcc75a.5428b","name":"Sigfox to Influx payload - Battery","func":"var pld = msg.payload;\n\nif(! (\"payload\" in pld )){\n    node.error(\"Resquest body does not contain expected data\");\n}else if(pld.payload.length != 8){\n    node.error(\"The lenght does no correspond to the data expected\");\n}else{\n    \n    // split sigfox payload into 2 parts: weight & battery\n    // value are hexadecimale into a string type\n    var batteryHex = pld.payload.slice(4, 8);\n    \n    // convert to int \n    var battery = parseInt(batteryHex, 16);\n    \n   msg.payload = [{\n       value: battery\n   },\n   {\n       device:pld.device\n   }];\n    \n    return msg;\n    \n}\n\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":890,"y":320,"wires":[["8fc721c7.b0caa"]]},{"id":"515cd534.b65dcc","type":"function","z":"fbbcc75a.5428b","name":"Sigfox to Influx payload - weight","func":"var pld = msg.payload;\n\nif(! (\"payload\" in pld )){\n    node.error(\"Resquest body does not contain expected data\");\n    \n}else if(pld.payload.length != 8){\n    node.error(\"The lenght does no correspond to the data expected\");\n    \n}else{\n    \n    // split sigfox payload into 2 parts: weight & battery\n    // value are hexadecimale into a string type\n    var weightHex = pld.payload.slice(0, 4)\n    \n    // convert to int \n    var weight = parseInt(weightHex, 16);\n    // var battery = parseInt(batteryHex, 16);\n\n    msg.payload = [{\n        value: weight\n    },\n    {\n        device:pld.device\n        \n    }];\n    \n    return msg;\n}\n\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":890,"y":240,"wires":[["7c278302.548ef4"]]},{"id":"7c278302.548ef4","type":"influxdb out","z":"fbbcc75a.5428b","influxdb":"9366e1ec.4d135","name":"InfluxDB input - Weights","measurement":"Weights","precision":"","retentionPolicy":"","database":"smartcollector","precisionV18FluxV20":"ms","retentionPolicyV18Flux":"autogen","org":"erpi","bucket":"smartcollector","x":1190,"y":240,"wires":[]},{"id":"bb40680.6baf318","type":"influxdb in","z":"fbbcc75a.5428b","influxdb":"9366e1ec.4d135","name":"Get All Collectors Weight","query":"SELECT * FROM Weights WHERE ","rawOutput":false,"precision":"","retentionPolicy":"","org":"organisation","x":650,"y":480,"wires":[["cc92e59.92cda98","db4b5884.abc778"]]},{"id":"4efe6314.b7cacc","type":"http in","z":"fbbcc75a.5428b","name":"","url":"/api/collectors","method":"get","upload":false,"swaggerDoc":"","x":150,"y":480,"wires":[["8a007642.367ba"]]},{"id":"e0c929bb.11885","type":"http in","z":"fbbcc75a.5428b","name":"","url":"/api/collector/:id","method":"get","upload":false,"swaggerDoc":"","x":160,"y":640,"wires":[["784e6486.a0153c"]]},{"id":"9afbc56f.87818","type":"influxdb in","z":"fbbcc75a.5428b","influxdb":"9366e1ec.4d135","name":"Get one Collector Weight","query":"","rawOutput":false,"precision":"","retentionPolicy":"","org":"organisation","x":650,"y":640,"wires":[["9be83e63.f27a78","7ab98570.da7cd4"]]},{"id":"264f0353.392ba4","type":"http response","z":"fbbcc75a.5428b","name":"Response","statusCode":"","headers":{},"x":1150,"y":520,"wires":[]},{"id":"4977e2ad.ab4664","type":"http response","z":"fbbcc75a.5428b","name":"","statusCode":"","headers":{},"x":1130,"y":680,"wires":[]},{"id":"cc92e59.92cda98","type":"debug","z":"fbbcc75a.5428b","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":930,"y":440,"wires":[]},{"id":"8a007642.367ba","type":"function","z":"fbbcc75a.5428b","name":"Query creation","func":"msg.query = 'SELECT * FROM (bucket: \"Weights\")'\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":380,"y":480,"wires":[["bb40680.6baf318"]]},{"id":"db4b5884.abc778","type":"function","z":"fbbcc75a.5428b","name":"Response format","func":"if(msg.error != null ){\n    node.\n    msg.payload = {error : \"Internal error\"};\n    msg.statusCode = 500;\n    return msg\n}else{\n    msg.statusCode = 200;\n    return msg\n}","outputs":1,"noerr":0,"initialize":"","finalize":"","x":950,"y":520,"wires":[["264f0353.392ba4"]]},{"id":"784e6486.a0153c","type":"function","z":"fbbcc75a.5428b","name":"Query creation","func":"msg.query = 'SELECT * FROM (bucket: \"Weights\") WHERE device = ' + msg.req.params['id']\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":400,"y":640,"wires":[["9afbc56f.87818"]]},{"id":"7ab98570.da7cd4","type":"function","z":"fbbcc75a.5428b","name":"Response format","func":"if(msg.error != null ){\n    node.\n    msg.payload = {error : \"Internal error\"};\n    msg.statusCode = 500;\n}else{\n    return msg\n}","outputs":1,"noerr":0,"initialize":"","finalize":"","x":930,"y":680,"wires":[["4977e2ad.ab4664"]]},{"id":"9be83e63.f27a78","type":"debug","z":"fbbcc75a.5428b","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":910,"y":600,"wires":[]}]